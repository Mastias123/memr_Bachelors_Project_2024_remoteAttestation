theory ThirdEATImplementation
begin
builtins: revealing-signing 

// In this model the verifier and the relying party are the same entity
// this is a reasonable simplification since the verifier and relying party trust each other
// and in some instances they are the same identity

//The attester state represents the actual state that the attester is in.
//In the model the Attester state can be in three different states:
// * good
// * bad - either compromised and the TPM notices or just has bad values like old software update
// * partialCompromise - an adversary is able to trick the TPM to sign of bad attester data as if it was good attester data.


// Attester_data is the state that the TPM reports, meaning if an attester and its TPM 
// is compromised then the attester is in a compromised state, but the TPM can report that
// it is in a good state. The state is either 'good' or 'bad'

rule create_identities:
    [Fr(~ltk)]
    --[Create_ident($A, ~ltk)]->
    [!Identity($A, ~ltk, pk(~ltk)), Out(pk(~ltk)), AttesterState($A, 'good_state')]  


rule Verifier_sends_Nonce_to_Attester: 
    let 
        signed_nonce = revealSign(~n, ~Vltk)
    in
    [!Identity($Attester, ~Altk, pk(~Altk)), Fr(~n), !Identity($Verifier, ~Vltk, pk(~Vltk))]
    --[VerifierSendsNonce($Attester, $Verifier, signed_nonce)]-> 
    [Out(<$Verifier, $Attester, signed_nonce>), Nonce(~n), Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk)]


// rule attester gets compromised or has bad EAT data
rule Attester_Gets_In_Bad_State:
    [AttesterState($Attester, 'good_state')]
    --[AttesterGetsBadState($Attester)]->
    [AttesterState($Attester, 'bad_state')]

// Rule for an attester to get partially compromised -> meaning that an adversary compromises the attester and is able to make the TPM sign of information as if it was in a good state.
rule Attester_Gets_Partially_Comrpomised:
    [AttesterState($Attester, 'good_state')]
    --[AttesterGetsPartiallyCompromise($Attester)]->
    [AttesterState($Attester, 'partially_Compromised')]


// AttesterState($Attester, 'good') -[CompleteCompromise($Attester)]-> Out(~Altk)
// AttesterState($Attester, 'bad') -[RegainControl($Attester)]-> AttesterState($Attester, 'good')


//=========================================================================================================================================


rule Attester_create_and_sends_EAT_good:
    let
        attester_data = 'good' // Check that you're in a good state and send good firmware
        EAT = <signed_nonce, attester_data>
        signed_EAT = revealSign(EAT, ~Altk)
    in
    [
        !Identity($Attester, ~Altk, pk(~Altk)), 
        In(<$Verifier, $Attester, signed_nonce>), 
        AttesterState($Attester, 'good_state')
    ]
    --[AttesterSendsEatGood($Attester, $Verifier, signed_EAT, signed_nonce)]->
    [Out(<$Attester, $Verifier, signed_EAT>)]

// rule for offering a signing interface to the attacker when the attester is compromised 
rule Attester_create_and_sends_EAT_bad:
    let
        attester_data = 'bad' // check that you're in a bad state and send bad_firmware
        EAT = <signed_nonce, attester_data>
        signed_EAT = revealSign(EAT, ~Altk)
        // there's no explicit test for the authenticity and integrity of signed_nonce
    in
    [ 
        !Identity($Attester, ~Altk, pk(~Altk)),
        In(<$Verifier, $Atterster, signed_nonce>),
        AttesterState($Attester, 'bad_state')
    ]
    --[AttesterSendsEatBad($Attester, $Verifier, signed_EAT, signed_nonce )]->
    [Out(<$Attester, $Verifier, signed_EAT>)] 

rule Attester_create_and_sends_EAT_partial_Compromised:
    let
        attester_data = 'good'
        EAT = <signed_nonce, attester_data>
        signed_EAT = revealSign(EAT, ~Altk)
    in
    [
        !Identity($Attester, ~Altk, pk(~Altk)), 
        In(<$Verifier, $Attester, signed_nonce>), 
        AttesterState($Attester, 'partially_Compromised')
    ]
    --[AttesterSendsEatPartialCompromise($Attester, $Verifier, signed_EAT, signed_nonce)]->
    [Out(<$Attester, $Verifier, signed_EAT>)]

//=========================================================================================================================================



rule Verifier_receive_and_verify_EAT:
    let 
        EAT = getMessage(signed_EAT) // Get message without key, only something a "simulator actor" can do
        check_signature = revealVerify(signed_EAT, EAT, pk(~Altk))

        unpacked_nonce = fst(EAT)
        unpacked_state = snd(EAT)
    in    
    [Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk), Nonce(~n), !Identity($Attester, ~Altk, pk(~Altk)),  In(<$Attester, $Verifier, signed_EAT>)]
    --[VerifierVerifiesEat($Attester, $Verifier, signed_EAT, ~n),
        Eq(unpacked_nonce, ~n),
        Eq(check_signature, true),
        Eq(unpacked_state, 'good')
      ]->
    [EatAuthenticityVerified($Attester, $Verifier, signed_EAT, ~n)]
    


rule verificationSuccess:
    [EatAuthenticityVerified($Attester, $Verifier, signed_EAT, ~n)]
    --[Verification_success($Attester, $Verifier, signed_EAT, ~n)]->
    []


restriction Equality:
   "All x y #i . Eq(x,y) @i ==> x=y "    


restriction OnlyOneIdentity:
    "All A ltk1 ltk2 #i #j. Create_ident(A,ltk1) @i & Create_ident(A,ltk2) @j ==> ltk1=ltk2"




//==========================================================================================================================================================
// Lemmas
//==========================================================================================================================================================



// sanity check: the protocol gets to the end (i.e. we reach the event Verification_success)
lemma sanity_check:
"
All Attester Verifier signed_EAT n #k .
    (
        Verification_success(Attester, Verifier, signed_EAT, n) @k
    ) 
    ==> 
    (
        (Ex Verifier1 vltk #t #i .
           VerifierSendsNonce(Attester, Verifier, revealSign(n, vltk)) @t &
           AttesterSendsEatGood(Attester, Verifier1, signed_EAT, n) @i &
            #t < #k & 
            #i < #k) |
            (Ex #j. AttesterGetsPartiallyCompromise(Attester) @j & #j < #k) 
            
    )
"

//The verifier can't successfully verify an attester that is in a "bad state".
//The verifier can't successfully verify an eat with a wrong nonce
//with only non-compormised parties
// if the Attester never turn rouge (i.e. AttesterCompromise never happens), the protocol still runs to the end (i.e. we reach the event Verification_success
lemma cannot_Verify_A_Bad_EAT_or_Compromised_Attester:
"
All Attester Verifier signed_EAT n #k.
    (
        Verification_success(Attester, Verifier, signed_EAT, n) @k
    ) 
    ==> 
    (
        ((Ex Verifier1 vltk #t #i.
        VerifierSendsNonce(Attester, Verifier, revealSign(n, vltk)) @t &
        AttesterSendsEatGood(Attester, Verifier1, signed_EAT, n) @i &
            #t < #k & 
            #i < #k) & (not (Ex #j. AttesterGetsBadState(Attester) @j & #j < #k))
        ) |
        (Ex #j. AttesterGetsPartiallyCompromise(Attester) @j & #j < #k) 
            
    )
"


//The Attester doesn't check the origin of the nonce
lemma verify_nonce_not_send_by_Verifier:
exists-trace
"
All Attester Verifier signed_EAT n #i #t .
    (
        // VerifierVerifiesEat(Attester, Verifier, signed_EAT, n) @i &
        Verification_success(Attester, Verifier, signed_EAT, n) @i &
        AttesterSendsEatGood(Attester, Verifier, signed_EAT, n) @t &
        #t < #i
    )
    ==> 
    not (
        Ex vltk #j .
            VerifierSendsNonce(Attester, Verifier, revealSign(n, vltk)) @j &
            #j < #t
    )
"

// add a lemma that shows that agreement doesn't hold from the attester's point of view
// lemma attester_does_not_agree_on_nonce_origin:
// exists-trace
// "
// All Attester Verifier signed_EAT signed_nonce n vltk #t .
//     (
//         AttesterSendsEatGood(Attester, Verifier, signed_EAT, revealSign(n, vltk)) @t
//     )
//     ==> 
//         not (Ex vltk #j .
//             VerifierSendsNonce(Attester, Verifier, revealSign(n, vltk)) @j &
//             #j < #t
//     )
// "



//K never learns the attesters long term key
lemma attester_private_key_compromised:
 "
 All Attester Verifier signed_EAT ltk n #i #k .
    ( 
        Create_ident(Attester, ltk) @k &
        VerifierVerifiesEat(Attester, Verifier, signed_EAT, n) @i 
    )
    ==> not(Ex #j .
                K(ltk) @j & #j<#i &
                #k<#i)
 "

 //K never learns the verifiers long term key
 lemma verifier_private_key_compromised:
 "
 All Attester Verifier signed_EAT Altk Vltk n #c1 #c2 #i .
    ( 
        Create_ident(Attester, Altk) @c1 &
        Create_ident(Verifier, Vltk) @c2 &
        VerifierVerifiesEat(Attester, Verifier, signed_EAT, n) @i 
    )
    ==> not(Ex #j .
                K(Vltk) @j & #j<#i & 
                ((#c1<#i)&(#c2<#i)) 
            )
 "


lemma nonce_freshness_across_sessions:
 "
 All Attester Verifier n #i #j .
     (
         VerifierSendsNonce(Attester, Verifier, n) @i &
         VerifierSendsNonce(Attester, Verifier, n) @j
     )
     ==> #i = #j
 "

//Lemma shows that an adversary learns the values in the EAT
lemma adversary_learns_the_EAT_information:
 "
 All Attester Verifier signed_EAT n #i . 
     (
        Verification_success(Attester, Verifier, signed_EAT, n) @i
     )
     ==> (
            (Ex verifier1 EAT Altk #j . AttesterSendsEatGood(Attester, verifier1, revealSign(EAT, Altk), n) @j) | 
            (Ex verifier1 EAT Altk #j . AttesterSendsEatPartialCompromise(Attester, verifier1, revealSign(EAT, Altk), n) @j)
         ) &
        ((Ex EAT #k . K(EAT) @k) & (Ex n #k1 . K(n) @k1))
 "


end
