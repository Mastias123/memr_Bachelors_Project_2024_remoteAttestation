theory SecondEATImplementation
begin
builtins: asymmetric-encryption, revealing-signing

// This version of the protocol has problems to weak agreement and non-injection, in that the attester doesn't verify the nonce. And there isn't a one to one relation

rule create_identities:
    [Fr(~ltk)] //generate new fresh private key
    -->
    [!Identity($A, ~ltk, pk(~ltk)), Out(pk(~ltk))] //Generate a fact where the agent:A is assosiated with the priv/pub-key and output the public-key to the web


rule Verifier_sends_Nonce_to_Attester: 
    let 
        signed_nonce = revealSign(~n, ~Vltk)
    in
    [!Identity($Attester, ~Altk, pk(~Altk)), Fr(~n), !Identity($Verifier, ~Vltk, pk(~Vltk)) ]
    -->
    [Out(<$Verfier, $Attester, signed_nonce>), !Nonce(~n), Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk)]


rule Atterster_create_and_sends_EAT:
    let
        EAT = <signed_nonce, $attester_data>
        signed_EAT = revealSign(EAT, ~Altk)
        //Potential verifying of the signed_nonce
    in
    [!Identity($Attester, ~Altk, pk(~Altk)), In(<$Verifier, $Atterster, signed_nonce>)]
    --[AttesterSendsEat($Attester, $Verifier, signed_EAT )]->
    [Out(<$Attester, $Verifier, signed_EAT>)]

rule Verifier_recieve_and_verify_EAT:
    let 
        EAT = getMessage(signed_EAT)
        check_signature = revealVerify(signed_EAT, EAT, pk(~Altk))
        unpakked_nonce = revealVerify(fst(EAT), ~n, pk(~Vltk))

    in    
    [Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk), !Nonce(~n), !Identity($Attester, ~Altk, pk(~Altk)),  In(<$Attester, $Verfier, signed_EAT>), !Identity($Verifier, ~Vltk, pk(~Vltk)) ]
    --[VerifierVerifiesEat($Attester, $Verifier, signed_EAT), Eq(check_signature, true), Eq(unpakked_nonce, true)]->
    []

    

// Lemmas
//lemma 1 : verifier could never succesfully verify an attester result, that was not provided by the attester 
//lemma 3 : Include state in the Attester -> Then have a lemma say that the verifier can't successfully verify an attester that is in a bad state.
restriction Equality:
"All x y #i . Eq(x,y) @i ==> x=y "

lemma lem1:
 "
 All Attester Verifier signed_EAT #i . 
    (
        VerifierVerifiesEat(Attester, Verifier, signed_EAT) @i

    )
    ==> (Ex #j . AttesterSendsEat(Attester, Verifier, signed_EAT) @j & #j < #i)    
 "

end
