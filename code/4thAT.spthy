theory Se
begin
builtins: asymmetric-encryption, revealing-signing

// This iteratrion adds an if else check

rule create_identities:
    [Fr(~ltk)] //generate new fresh private key
    -->
    [!Identity($A, ~ltk, pk(~ltk)), Out(pk(~ltk)), AttesterState($A, 'good') ] //initialize attesterstate to be 'good'


rule Verifier_sends_Nonce_to_Attester: 
    let 
        signed_nonce = revealSign(~n, ~Vltk)
    in
    [!Identity($Attester, ~Altk, pk(~Altk)), Fr(~n), !Identity($Verifier, ~Vltk, pk(~Vltk)) ]
    -->
    [Out(<$Verfier, $Attester, signed_nonce>), !Nonce(~n), Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk)]



// Transition attester state to 'bad', in some cases
rule Attester_becomes_bad:
    [AttesterState($Attester, 'good')]
    -->
    [AttesterState($Attester, 'bad')]



rule Atterster_create_and_sends_EAT:
    let
        EAT = <signed_nonce, $attester_data>
        signed_EAT = revealSign(EAT, ~Altk)
        //Potential verifying of the signed_nonce
        VerifyVNonce = revealVerify(signed_nonce, ~n, pk(~Vltk))
    in
    [!Identity($Attester, ~Altk, pk(~Altk)),!Nonce(~n), In(<$Verifier, $Atterster, signed_nonce>), Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk)]
    --[AttesterSendsEat($Attester, $Verifier, signed_EAT ), Eq(VerifyVNonce, true)]->
    [Out(<$Attester, $Verifier, signed_EAT>)]







rule Verifier_recieve_and_verify_EAT:
    let 
        EAT = getMessage(signed_EAT)
        check_signature = revealVerify(signed_EAT, EAT, pk(~Altk))
        unpakked_nonce = revealVerify(fst(EAT), ~n, pk(~Vltk))
        sf = AttesterState

    in    
    [Verifier0($Verifier, $Attester, pk(~Altk), ~n, ~Vltk), !Nonce(~n), !Identity($Attester, ~Altk, pk(~Altk)),  In(<$Attester, $Verfier, signed_EAT>), !Identity($Verifier, ~Vltk, pk(~Vltk))] 
    --[VerifierVerifiesEat($Attester, $Verifier, signed_EAT), Eq(check_signature, true), Eq(unpakked_nonce, true), AttesterState($Attester, 'good')]->
    []

 

restriction Equality:
"All x y #i . Eq(x,y) @i ==> x=y "



// Lemmas
//lemma 1 : verifier could never succesfully verify an attester result, that was not provided by the attester 


lemma lem1: //cannot succesfully verify an eat that is not send by an attester
 "
 All Attester Verifier signed_EAT #i . 
    (
        VerifierVerifiesEat(Attester, Verifier, signed_EAT) @i

    )
    ==> (Ex #j . AttesterSendsEat(Attester, Verifier, signed_EAT) @j & #j < #i)    
 "


//the verifier can't successfully verify an attester that is in a bad state.
lemma bad_state_prevention:
 "
 All Attester Verifier signed_EAT #i .
    (
        VerifierVerifiesEat(Attester, Verifier, signed_EAT) @i
    )
    ==> (Ex #j . AttesterSendsEat(Attester, Verifier, signed_EAT) @j & #j < #i & AttesterState(Attester, 'good') @j)
 "





end